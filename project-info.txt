=== Project Structure ===
üìÅ db/
  üìÑ index.js
  üìÑ schema.js
  üìÑ seed.js
üìÅ drizzle/
  üìÑ 0000_sparkling_roulette.sql
  üìÅ meta/
    üìÑ 0000_snapshot.json
    üìÑ _journal.json
üìÑ drizzle.config.js
üìÑ index.js
üìÑ package.json
üìÅ public/
  üìÑ index.html
  üìÅ login/
    üìÑ index.html
  üìÅ logout/
    üìÑ index.html
  üìÅ register/
    üìÑ index.html
  üìÅ todos/
    üìÑ index.html

=== File Contents ===

=== File: drizzle.config.js ===
import 'dotenv/config';

export default {
  dialect: 'postgresql',
  schema: './db/schema.js',
  out: './drizzle',
  dbCredentials: {
    url: process.env.DATABASE_URL,
    ssl: { rejectUnauthorized: false },
  },
};


=== File: index.js ===
import { Hono } from 'hono';
import { serve } from '@hono/node-server';
import 'dotenv/config';
import { db } from './db/index.js';
import { users, todos } from './db/schema.js';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { setCookie, getCookie } from 'hono/cookie';
import { serveStatic } from '@hono/node-server/serve-static';

const app = new Hono();

app.use('/*', serveStatic({ root: './public' }));
// app.use('/', serveStatic({ path: './public/index.html' }));
// app.get('/', (c) => c.html('<h1>Tim Pengembang</h1><h2>Nama Kalian</h2>'));

app.post('/api/register', async (c) => {
  try {
    const { username, password } = await c.req.json();
    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = await db
      .insert(users)
      .values({ username, password: hashedPassword })
      .returning({ id: users.id, username: users.username });

    return c.json({ success: true, data: newUser[0] }, 201);
  } catch (error) {
    return c.json({ success: false, message: 'Registrasi gagal' }, 400);
  }
});

app.post('/api/login', async (c) => {
  const { username, password } = await c.req.json();
  const user = await db.query.users.findFirst({
    where: (users, { eq }) => eq(users.username, username),
  });

  if (!user)
    return c.json(
      { success: false, message: 'Username atau password salah' },
      401
    );

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid)
    return c.json(
      { success: false, message: 'Username atau password salah' },
      401
    );

  const token = jwt.sign(
    { id: user.id, username: user.username },
    process.env.JWT_SECRET,
    { expiresIn: '1h' }
  );

  setCookie(c, 'token', token, {
    httpOnly: true,
    sameSite: 'Lax',
    maxAge: 3600,
  });

  return c.json({ success: true, message: 'Login berhasil' });
});

app.get('/api/me', (c) => {
  const token = getCookie(c, 'token');
  if (!token) return c.json({ success: false, message: 'Unauthorized' }, 401);
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);

    return c.json({ success: true, data: user });
  } catch (error) {
    return c.json({ success: false, message: 'Unauthorized' }, 401);
  }
});

app.post('/api/logout', (c) => {
  setCookie(c, 'token', '', { maxAge: -1 });
  return c.json({ success: true, message: 'Logout berhasil' });
});

app.post('/api/todos', async (c) => {
  const token = getCookie(c, 'token');
  if (!token) return c.json({ success: false, message: 'Unauthorized' }, 401);
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    const { note } = await c.req.json();
    const newTodo = await db
      .insert(todos)
      .values({ note, userId: user.id })
      .returning();
    return c.json({ success: true, data: newTodo[0] }, 201);
    return c.json({ success: true, data: user });
  } catch (error) {
    return c.json({ success: false, message: 'Unauthorized' }, 401);
  }
});

app.get('/api/todos', async (c) => {
  const token = getCookie(c, 'token');
  if (!token) return c.json({ success: false, message: 'Unauthorized' }, 401);
  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    const userTodos = await db.query.todos.findMany({
      where: (todos, { eq }) => eq(todos.userId, user.id),
    });
    return c.json({ success: true, data: userTodos });
  } catch (error) {
    return c.json({ success: false, message: 'Unauthorized' }, 401);
  }
});

serve({ fetch: app.fetch, port: 3000 });
console.log('‚úÖ API running at http://localhost:3000');


=== File: package.json ===
{
  "name": "my-todos",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "db:generate": "drizzle-kit generate",
    "db:migrate": "drizzle-kit migrate",
    "db:seed": "node db/seed.js",
    "start": "node index.js"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@hono/node-server": "^1.19.5",
    "bcryptjs": "^3.0.2",
    "cookie": "^1.0.2",
    "dotenv": "^17.2.3",
    "drizzle-orm": "^0.44.6",
    "hono": "^4.9.10",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.16.3"
  },
  "devDependencies": {
    "drizzle-kit": "^0.31.5"
  }
}


=== File: drizzle/0000_sparkling_roulette.sql ===
[Binary or unreadable file]


=== File: db/index.js ===
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as schema from './schema.js';

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false },
});

export const db = drizzle(pool, { schema });


=== File: db/schema.js ===
import { pgTable, serial, varchar, text, integer } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  username: varchar('username', { length: 256 }).notNull().unique(),
  password: varchar('password', { length: 256 }).notNull(),
});

export const todos = pgTable('todos', {
  id: serial('id').primaryKey(),
  note: text('note').notNull(),
  userId: integer('user_id')
    .references(() => users.id)
    .notNull(),
});


=== File: db/seed.js ===
// seed.js
import 'dotenv/config';
import { db } from './index.js';
import { todos, users } from './schema.js';

async function seed() {
  console.log('Seeding database...');

  // Hapus data lama (opsional)
  await db.delete(todos);
  await db.delete(users);

  // Buat user dummy
  const user1 = await db
    .insert(users)
    .values({
      username: 'andi',
      // Di aplikasi nyata, password ini harus di-hash!
      // Tapi untuk seed, kita bisa gunakan teks biasa.
      password: 'hashed_password_for_andi',
    })
    .returning();

  // Buat todo dummy untuk user1
  await db.insert(todos).values([
    { note: 'Belajar Drizzle ORM', userId: user1[0].id },
    { note: 'Membuat API dengan Hono', userId: user1[0].id },
  ]);

  console.log('‚úÖ Seeding completed!');
  process.exit(0);
}

seed().catch((err) => {
  console.error('‚ùå Seeding failed:', err);
  process.exit(1);
});


=== File: public/index.html ===
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF--8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Loading...</title>
</head>

<body>
  <h1>Memeriksa status login...</h1>

  <script>
    (async () => {
      try {
        const response = await fetch('/api/me');
        if (response.ok) {
          const { success } = await response.json();
          if (success) {
            window.location.href = '/todos/';
          } else {
            window.location.href = '/login/';
          }
        } else {
          window.location.href = '/login/';
        }
      } catch (error) {
        console.error('Error checking auth status:', error);
        window.location.href = '/login/';
      }
    })();
  </script>
</body>

</html>

=== File: drizzle/meta/0000_snapshot.json ===
{
  "id": "b78fbe92-34f3-4c47-81b5-722c6d1b4eec",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "version": "7",
  "dialect": "postgresql",
  "tables": {
    "public.todos": {
      "name": "todos",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "note": {
          "name": "note",
          "type": "text",
          "primaryKey": false,
          "notNull": true
        },
        "user_id": {
          "name": "user_id",
          "type": "integer",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {
        "todos_user_id_users_id_fk": {
          "name": "todos_user_id_users_id_fk",
          "tableFrom": "todos",
          "tableTo": "users",
          "columnsFrom": [
            "user_id"
          ],
          "columnsTo": [
            "id"
          ],
          "onDelete": "no action",
          "onUpdate": "no action"
        }
      },
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    },
    "public.users": {
      "name": "users",
      "schema": "",
      "columns": {
        "id": {
          "name": "id",
          "type": "serial",
          "primaryKey": true,
          "notNull": true
        },
        "username": {
          "name": "username",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": true
        },
        "password": {
          "name": "password",
          "type": "varchar(256)",
          "primaryKey": false,
          "notNull": true
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {
        "users_username_unique": {
          "name": "users_username_unique",
          "nullsNotDistinct": false,
          "columns": [
            "username"
          ]
        }
      },
      "policies": {},
      "checkConstraints": {},
      "isRLSEnabled": false
    }
  },
  "enums": {},
  "schemas": {},
  "sequences": {},
  "roles": {},
  "policies": {},
  "views": {},
  "_meta": {
    "columns": {},
    "schemas": {},
    "tables": {}
  }
}

=== File: drizzle/meta/_journal.json ===
{
  "version": "7",
  "dialect": "postgresql",
  "entries": [
    {
      "idx": 0,
      "version": "7",
      "when": 1759705697161,
      "tag": "0000_sparkling_roulette",
      "breakpoints": true
    }
  ]
}

=== File: public/login/index.html ===
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Login</title>
</head>

<body>
  <div class="container">
    <h1>Login</h1>
    <div id="message"></div>
    <form id="loginForm">
      <input type="text" id="username" placeholder="Username" required />
      <input type="password" id="password" placeholder="Password" required />
      <button type="submit">Login</button>
    </form>
    <p>Belum punya akun? <a href="/register/">Daftar di sini</a></p>
  </div>

  <script>
    const form = document.getElementById('loginForm');
    const messageDiv = document.getElementById('message');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      messageDiv.textContent = '';

      try {
        const response = await fetch('/api/login', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password }),
        });

        const result = await response.json();

        if (result.success) {
          window.location.href = '/todos/';
        } else {
          messageDiv.textContent = result.message || 'Login gagal!';
        }
      } catch (error) {
        messageDiv.textContent = 'Terjadi kesalahan. Silakan coba lagi.';
      }
    });
  </script>
</body>

</html>

=== File: public/logout/index.html ===
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Logging Out...</title>
</head>

<body>
  <h1>Anda sedang keluar...</h1>
  <script>
    (async () => {
      try {
        await fetch('/api/logout', { method: 'POST' });
      } catch (error) {
        console.error('Logout failed:', error);
      } finally {
        window.location.href = '/login/';
      }
    })();
  </script>
</body>

</html>

=== File: public/register/index.html ===
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Registrasi</title>
</head>

<body>
  <div class="container">
    <h1>Registrasi Akun Baru</h1>
    <div id="message"></div>
    <form id="registrationForm">
      <input type="text" id="username" placeholder="Username" required />
      <input type="password" id="password" placeholder="Password" required />
      <button type="submit">Daftar</button>
    </form>
    <p>Sudah punya akun? <a href="/login/">Login di sini</a></p>
  </div>

  <script>
    const form = document.getElementById('registrationForm');
    const messageDiv = document.getElementById('message');

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const username = document.getElementById('username').value;
      const password = document.getElementById('password').value;
      messageDiv.textContent = '';
      messageDiv.style.color = 'red';

      try {
        const response = await fetch('/api/register', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password }),
        });

        const result = await response.json();

        if (result.success) {
          messageDiv.style.color = 'green';
          messageDiv.innerHTML =
            'Registrasi berhasil! Silakan <a href="/login/">login</a>.';
          form.reset();
        } else {
          messageDiv.textContent = result.message || 'Registrasi gagal!';
        }
      } catch (error) {
        messageDiv.textContent = 'Terjadi kesalahan. Silakan coba lagi.';
      }
    });
  </script>
</body>

</html>

=== File: public/todos/index.html ===
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>My Todos</title>
</head>

<body>
  <div>
    <header>
      <h1>Halo, <span id="username"></span>!</h1>
      <a href="/logout/">Logout</a>
    </header>

    <main>
      <h2>Todos Anda</h2>
      <form id="addTodoForm">
        <input type="text" id="noteInput" placeholder="Apa yang perlu dilakukan?" required />
        <button type="submit">Tambah</button>
      </form>
      <ul id="todoList"></ul>
    </main>
  </div>

  <script>
    const usernameSpan = document.getElementById('username');
    const addTodoForm = document.getElementById('addTodoForm');
    const noteInput = document.getElementById('noteInput');
    const todoList = document.getElementById('todoList');

    // 1. Periksa status login & dapatkan data pengguna
    (async () => {
      try {
        const response = await fetch('/api/me');
        if (!response.ok) {
          window.location.href = '/login/';
          return;
        }
        const { success, data } = await response.json();
        if (success) {
          usernameSpan.textContent = data.username;
          fetchTodos(); // Muat todos setelah user terverifikasi
        } else {
          window.location.href = '/login/';
        }
      } catch (error) {
        window.location.href = '/login/';
      }
    })();

    // 2. Fungsi untuk mengambil dan menampilkan todos
    const fetchTodos = async () => {
      try {
        const response = await fetch('/api/todos'); // Endpoint GET
        const { success, data } = await response.json();
        if (success) {
          todoList.innerHTML = ''; // Kosongkan daftar
          data.forEach((todo) => {
            const li = document.createElement('li');
            li.textContent = todo.note;
            todoList.appendChild(li);
          });
        }
      } catch (error) {
        console.error('Gagal mengambil todos:', error);
      }
    };

    // 3. Event listener untuk menambah todo baru
    addTodoForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const note = noteInput.value;
      if (!note) return;

      try {
        const response = await fetch('/api/todos', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ note }),
        });
        const { success } = await response.json();
        if (success) {
          noteInput.value = '';
          fetchTodos(); // Muat ulang daftar todos
        }
      } catch (error) {
        console.error('Gagal menambah todo:', error);
      }
    });


  </script>
</body>

</html>
